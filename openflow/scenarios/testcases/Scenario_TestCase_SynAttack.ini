[General]
network = openflow.networks.Scenario_TestCaseAltered

output-vector-file = ${resultdir}/${inifile}/${inifile}-${configname}-${runnumber}.vec
output-scalar-file = ${resultdir}/${inifile}/${inifile}-${configname}-${runnumber}.sca


sim-time-limit = 10s
repeat = 1
seed-set = ${repetition}

**.numControllers = 1

**.numClients = 1

**.rtt.result-recording-modes = +vector,-stats
**.clientG1[*].tcpApp[*].connectionStarted.result-recording-modes = +vector,+stats
**.clientG1[*].tcpApp[*].connectionEstablished.result-recording-modes = +vector,+stats
**.clientG1[*].tcpApp[*].connectionFinished.result-recording-modes = +vector,+stats
**.clientG1[*].tcpApp[*].transmittedBytes.result-recording-modes = +vector,+stats


**.clientG1[*].tcpApp[*].connectionStarted*.vector-recording = true
**.clientG1[*].tcpApp[*].connectionEstablished*.vector-recording = true
**.clientG1[*].tcpApp[*].connectionFinished*.vector-recording = true
**.clientG1[*].tcpApp[*].transmittedBytes*.vector-recording = true

**.packetsPerSecondAt**.scalar-recording = true

**.packets.result-recording-modes = +count
**.packets*.scalar-recording = true

**.avgQueueSizeAt**.scalar-recording = true
**.controllerInvolvementsFor**.scalar-recording = true

**.nodeInNumPaths**.scalar-recording = true
**.avgPathLength.scalar-recording = true
**.minPathLength.scalar-recording = true
**.maxPathLength.scalar-recording = true
**.numClients.scalar-recording = true
**.numPaths.scalar-recording = true
**.truePositive.scalar-recording = true
**.trueNegative.scalar-recording = true
**.falsePositive.scalar-recording = true
**.falseNegative.scalar-recording = true

#The two lines below are commented out as they caused an error of listeneres not found in phy eNB
#**.vector-recording = false
#**.scalar-recording = false

#**.rtt.result-recording-modes = +vector,-stats
#**.queueSize.result-recording-modes = +vector,+stats
#**.bufferSize.result-recording-modes = +vector,+stats
#**.waitingTime.result-recording-modes = +vector,+stats

#**.packets.result-recording-modes = +count
#**.packetBytes.result-recording-modes = +sum
#**.packets*.scalar-recording = true
#**.packetBytes*.scalar-recording = true

#**.numPacketIn*.scalar-recording = true

#**.bufferSize*.vector-recording = true
#**.queueSize*.vector-recording = true
#**.waitingTime*.vector-recording = true

#**.flowTable**.scalar-recording = true

#**.pingApp[*].rtt*.vector-recording = true


#**.controllerApps[*].*.scalar-recording = true
#**.pingApp[*].numLost*.scalar-recording = true
#**.pingApp[*].numOutOfOrderArrivals*.scalar-recording = true

#**.vector-recording = false
#**.scalar-recording = false


#**.spanningTree.startNode = 4
#**.highlightActivePorts = true

# random ping application
#**.clientG1[*].numTcpApps = 1 
**.server.numTcpApps = 1
**.server.tcpApp[*].typename = "TCPEchoApp"
**.server.tcpApp[*].localPort = 1000
**.server.tcpApp[*].dataTransferMode = "bytestream"
**.server.tcp.tcpAlgorithmClass = "DumbTCP"
#**.clientG1[*].tcpApp[*].typename = "TCPSessionApp"
#**.clientG1[*].tcpApp[*].connectAddress = "clientG2[0]"

**.configurator.dumpAddresses = true



#openflow params
**.open_flow_switch*.OF_Switch.connectAddress = "open_flow_controller1"
**.open_flow_switch*.OF_Switch.connectAt = uniform(0s,1s)
**.open_flow_switch*.etherMAC[*].promiscuous = true
**.OF_Switch.flowTimeoutPollInterval = 10s

# 404bytes see imix and buffer size of 1.5mb see hp switch 1500000/404
**.OF_Switch.bufferCapacity = 3712

**.OF_Switch.serviceTime = 0.000035s


#1800 00 requests per second on 8xcores 8xthreads and 32 switches (hotice2012-final)
**.open_flow_controller*.serviceTime = 0.000005556s *(${controllerServiceTimeFactor=1} )



**.open_flow_controller*.numControllerApps = 1
**.open_flow_controller*.controllerApps[0].typename = "LearningSwitch"
#**.open_flow_controller*.controllerApps[*].flowModIdleTimeOut = 5


# NIC configuration
#**.ppp[*].queue.frameCapacity = 10  # in routers
#**.open_flow_switch*.tcp.mss = 800


#linux mint 15 std value
#**.arp.cacheTimeout = 60s
 







####################################################################################################################################
####################################################################################################################################

#FROM LTE - lte.simulations.networks.SingleCell#

####################################################################################################################################
####################################################################################################################################
tkenv-image-path=../../images
tkenv-plugin-path = ../../../inet/etc/plugins
output-scalar-file-append = false


##########################################################
#			Simulation parameters                        #
##########################################################
#record-eventlog = true
#eventlog-options = module, displaystring, message
#eventlog-message-detail-pattern = *:(not declaredOn(cMessage) and not declaredOn(cNamedObject) and not declaredOn(cObject))
tkenv-default-config = 
#debug-on-errors=true
#**.coreDebug = true
 

##########################################################
#			         channel parameters                  #
##########################################################
**.channelControl.pMax = 10W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2100e+6Hz

################### RLC parameters #######################
#**.fragmentSize=30B
#**.timeout=50s
################### MAC parameters #######################
**.mac.queueSize = 1MiB
**.mac.maxBytesPerTti = 1KiB
**.mac.macDelay.result-recording-modes = all
**.mac.macThroughput.result-recording-modes = all

# Schedulers
**.mac.schedulingDisciplineDl = "MAXCI"
**.mac.schedulingDisciplineUl = "MAXCI"

################ PhyLayer parameters #####################
**.nic.phy.usePropagationDelay = true
**.nic.phy.channelModel=xmldoc("config_channel.xml")

################ Feedback parameters #####################
**.feedbackComputation = xmldoc("config_channel.xml")

################ Mobility parameters #####################

# *
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m

**.mobility.initFromDisplayString = true

# UEs
**.enableHandover = false


################# Deployer parameters #######################
# UEs attached to eNB
**.fbDelay = 1

# General
**.deployer.positionUpdateInterval = 0.001s
**.deployer.broadcastMessageInterval = 1s

# RUs
**.deployer.numRus = 0
**.deployer.ruRange = 50
**.deployer.ruTxPower = "50,50,50;"
**.deployer.ruStartingAngle = 0deg
**.deployer.antennaCws = "2;" # !!MACRO + RUS (numRus + 1)

# AMC
**.deployer.numRbDl = 6
**.deployer.numRbUl = 6
**.deployer.rbyDl = 12
**.deployer.rbyUl = 12
**.deployer.rbxDl = 7
**.deployer.rbxUl = 7
**.deployer.rbPilotDl = 3
**.deployer.rbPilotUl = 0
**.deployer.signalDl = 1
**.deployer.signalUl = 1
**.deployer.numBands = 1
**.deployer.numPreferredBands = 1

############### AMC MODULE PARAMETERS ###############
**.rbAllocationType = "localized"
**.mac.amcMode = "AUTO"
**.feedbackType = "ALLBANDS"
**.feedbackGeneratorType = "IDEAL"
**.maxHarqRtx = 3
**.pfAlpha = 0.95
**.pfTmsAwareDL = false

############### Transmission Power ##################
**.ueTxPower = 26
**.microTxPower = 20
**.*TxPower = 40


# connect each UE to the eNB

#**.numUe = 20
**.ue[*].macCellId = 1
**.ue[*].masterId = 1

#Apps
*.ue[*].numTcpApps = 10
**.ue[*].tcpApp[*].typename = "TCPSessionApp"
**.ue[*].tcpApp[*].localPort = 1000
**.ue[*].tcpApp[*].dataTransferMode = "bytestream"
**.ue[*].tcpApp[*].connectAddress = "server"
 
#**.ue[*].tcpApp[0].tOpen = uniform(1s,10s)
#**.ue[*].tcpApp[1].tOpen = uniform(11s,20s)
#**.ue[*].tcpApp[2].tOpen = uniform(21s,30s)
#**.ue[*].tcpApp[3].tOpen = uniform(31s,40s)
#**.ue[*].tcpApp[4].tOpen = uniform(41s,50s)
#**.ue[*].tcpApp[5].tOpen = uniform(51s,60s)
#**.ue[*].tcpApp[6].tOpen = uniform(61s,70s)
#**.ue[*].tcpApp[7].tOpen = uniform(71s,80s)
#**.ue[*].tcpApp[8].tOpen = uniform(81s,90s)
#**.ue[*].tcpApp[9].tOpen = uniform(91s,100s) 

#**.ue[*].tcpApp[0].tSend = uniform(1s,10s)
#**.ue[*].tcpApp[1].tSend = uniform(11s,20s)
#**.ue[*].tcpApp[2].tSend = uniform(21s,30s)
#**.ue[*].tcpApp[3].tSend = uniform(31s,40s)
#**.ue[*].tcpApp[4].tSend = uniform(41s,50s)
#**.ue[*].tcpApp[5].tSend = uniform(51s,60s)
#**.ue[*].tcpApp[6].tSend = uniform(61s,70s)
#**.ue[*].tcpApp[7].tSend = uniform(71s,80s)
#**.ue[*].tcpApp[8].tSend = uniform(81s,90s)
#**.ue[*].tcpApp[9].tSend = uniform(91s,100s)

**.ue[*].tcpApp[*].tOpen = uniform(1s+index*10s,10s*(index+1))

**.ue[*].tcpApp[*].tSend = uniform(1s+index*10s,10s*(index+1))

**.ue[*].tcpApp[*].sendBytes = uniform(100B,2000B)
#**.ue[*].tcpApp[0].sendScript = "1.5 999; 1.6 666; 1.7 777;"


#Malicious UEs

#**.numMal = 50
**.ueMal[*].macCellId = 1
**.ueMal[*].masterId = 1


*.ueMal[*].numTcpApps = 100

**.ueMal[*].tcpApp[*].typename = "TCPSessionApp"
**.ueMal[*].tcpApp[*].localPort = 1000
**.ueMal[*].tcpApp[*].connectAddress = "server"
**.ueMal[*].tcpApp[*].dataTransferMode = "bytestream"
#**.ueMal[*].tcpApp[*].tOpen = 2s
**.ueMal[*].tcpApp[*].tSend = 0
**.ueMal[*].tcpApp[*].sendBytes = 0
**.ueMal[*].tcpApp[*].sendScript = "1000 0;"

#**.ueMal[*].tcpApp[0..19].tOpen = 2s + 0.05s*index

#Number of waves pr flood attack: 5
#**.ueMal[*].tcpApp[0..4].tOpen = 2s + 0.2s*index
#**.ueMal[*].tcpApp[5..9].tOpen = 6s + 0.2s*index - 1s
#**.ueMal[*].tcpApp[10..14].tOpen = 9s + 0.2s*index - 2s
#**.ueMal[*].tcpApp[15..19].tOpen = 12s + 0.2s*index - 3s
#**.ueMal[*].tcpApp[20..24].tOpen = 15s + 0.2s*index - 4s
#**.ueMal[*].tcpApp[25..29].tOpen = 18s + 0.2s*index - 5s
#**.ueMal[*].tcpApp[30..34].tOpen = 21s + 0.2s*index - 6s
#**.ueMal[*].tcpApp[35..39].tOpen = 24s + 0.2s*index - 7s
#**.ueMal[*].tcpApp[40..44].tOpen = 27s + 0.2s*index - 8s
#**.ueMal[*].tcpApp[45..49].tOpen = 30s + 0.2s*index - 9s


#Number of waves pr flood attack: 10
**.ueMal[*].tcpApp[0..19].tOpen = 2s + 0.1s*index
**.ueMal[*].tcpApp[10..19].tOpen = 6s + 0.1s*index - 1s
**.ueMal[*].tcpApp[20..29].tOpen = 9s + 0.1s*index - 2s
**.ueMal[*].tcpApp[30..39].tOpen = 12s + 0.1s*index - 3s
**.ueMal[*].tcpApp[40..49].tOpen = 15s + 0.1s*index - 4s
**.ueMal[*].tcpApp[50..59].tOpen = 18s + 0.1s*index - 5s
**.ueMal[*].tcpApp[60..69].tOpen = 21s + 0.1s*index - 6s
**.ueMal[*].tcpApp[70..79].tOpen = 24s + 0.1s*index - 7s
**.ueMal[*].tcpApp[80..89].tOpen = 27s + 0.1s*index - 8s
**.ueMal[*].tcpApp[90..99].tOpen = 30s + 0.1s*index - 9s


#Number of waves pr flood attack: 15
#**.ueMal[*].tcpApp[0..14].tOpen = 2s + 0.07s*index
#**.ueMal[*].tcpApp[15..29].tOpen = 6s + 0.07s*index - 1s
#**.ueMal[*].tcpApp[30..44].tOpen = 9s + 0.07s*index - 2s
#**.ueMal[*].tcpApp[45..59].tOpen = 12s + 0.07s*index - 3s
#**.ueMal[*].tcpApp[60..74].tOpen = 15s + 0.07s*index - 4s
#**.ueMal[*].tcpApp[75..89].tOpen = 18s + 0.07s*index - 5s
#**.ueMal[*].tcpApp[90..104].tOpen = 21s + 0.07s*index - 6s
#**.ueMal[*].tcpApp[105..119].tOpen = 24s + 0.07s*index - 7s
#**.ueMal[*].tcpApp[120..134].tOpen = 27s + 0.07s*index - 8s
#**.ueMal[*].tcpApp[135..149].tOpen = 30s + 0.07s*index - 9s


#Number of waves pr flood attack: 20
#**.ueMal[*].tcpApp[0..19].tOpen = 2s + 0.05s*index
#**.ueMal[*].tcpApp[20..39].tOpen = 6s + 0.05s*index - 1s
#**.ueMal[*].tcpApp[40..59].tOpen = 9s + 0.05s*index - 2s
#**.ueMal[*].tcpApp[60..79].tOpen = 12s + 0.05s*index - 3s
#**.ueMal[*].tcpApp[80..99].tOpen = 15s + 0.05s*index - 4s
#**.ueMal[*].tcpApp[100..119].tOpen = 18s + 0.05s*index - 5s
#**.ueMal[*].tcpApp[120..139].tOpen = 21s + 0.05s*index - 6s
#**.ueMal[*].tcpApp[140..159].tOpen = 24s + 0.05s*index - 7s
#**.ueMal[*].tcpApp[160..179].tOpen = 27s + 0.05s*index - 8s
#**.ueMal[*].tcpApp[180..199].tOpen = 30s + 0.05s*index - 9s


#Wave frequency: every 2s
#**.ueMal[*].tcpApp[0..19].tOpen = 2s + 0.1s*index
#**.ueMal[*].tcpApp[10..19].tOpen = 4s + 0.1s*index - 1s
#**.ueMal[*].tcpApp[20..29].tOpen = 6s + 0.1s*index - 2s
#**.ueMal[*].tcpApp[30..39].tOpen = 8s + 0.1s*index - 3s
#**.ueMal[*].tcpApp[40..49].tOpen = 10s + 0.1s*index - 4s
#**.ueMal[*].tcpApp[50..59].tOpen = 12s + 0.1s*index - 5s
#**.ueMal[*].tcpApp[60..69].tOpen = 14s + 0.1s*index - 6s
#**.ueMal[*].tcpApp[70..79].tOpen = 16s + 0.1s*index - 7s
#**.ueMal[*].tcpApp[80..89].tOpen = 18s + 0.1s*index - 8s
#**.ueMal[*].tcpApp[90..99].tOpen = 20s + 0.1s*index - 9s

#Wave frequency: every 4s
#**.ueMal[*].tcpApp[0..19].tOpen = 2s + 0.1s*index
#**.ueMal[*].tcpApp[10..19].tOpen = 6s + 0.1s*index - 1s
#**.ueMal[*].tcpApp[20..29].tOpen = 10s + 0.1s*index - 2s
#**.ueMal[*].tcpApp[30..39].tOpen = 14s + 0.1s*index - 3s
#**.ueMal[*].tcpApp[40..49].tOpen = 18s + 0.1s*index - 4s
#**.ueMal[*].tcpApp[50..59].tOpen = 22s + 0.1s*index - 5s
#**.ueMal[*].tcpApp[60..69].tOpen = 26s + 0.1s*index - 6s
#**.ueMal[*].tcpApp[70..79].tOpen = 30s + 0.1s*index - 7s
#**.ueMal[*].tcpApp[80..89].tOpen = 34s + 0.1s*index - 8s
#**.ueMal[*].tcpApp[90..99].tOpen = 38s + 0.1s*index - 9s

#Two attacks
#**.ueMal[*].tcpApp[0..19].tOpen = 2s + 0.1s*index
#**.ueMal[*].tcpApp[10..19].tOpen = 6s + 0.1s*index - 1s
#**.ueMal[*].tcpApp[20..29].tOpen = 9s + 0.1s*index - 2s
#**.ueMal[*].tcpApp[30..39].tOpen = 12s + 0.1s*index - 3s
#**.ueMal[*].tcpApp[40..49].tOpen = 15s + 0.1s*index - 4s
#**.ueMal[*].tcpApp[50..59].tOpen = 18s + 0.1s*index - 5s
#**.ueMal[*].tcpApp[60..69].tOpen = 21s + 0.1s*index - 6s
#**.ueMal[*].tcpApp[70..79].tOpen = 24s + 0.1s*index - 7s
#**.ueMal[*].tcpApp[80..89].tOpen = 27s + 0.1s*index - 8s
#**.ueMal[*].tcpApp[90..99].tOpen = 30s + 0.1s*index - 9s

#**.ueMal[*].tcpApp[100..109].tOpen = 152s + 0.1s*index - 10s
#**.ueMal[*].tcpApp[110..119].tOpen = 156s + 0.1s*index - 11s
#**.ueMal[*].tcpApp[120..129].tOpen = 159s + 0.1s*index - 12s
#**.ueMal[*].tcpApp[130..139].tOpen = 162s + 0.1s*index - 13s
#**.ueMal[*].tcpApp[140..149].tOpen = 165s + 0.1s*index - 14s
#**.ueMal[*].tcpApp[150..159].tOpen = 168s + 0.1s*index - 15s
#**.ueMal[*].tcpApp[160..169].tOpen = 171s + 0.1s*index - 16s
#**.ueMal[*].tcpApp[170..179].tOpen = 174s + 0.1s*index - 17s
#**.ueMal[*].tcpApp[180..189].tOpen = 177s + 0.1s*index - 18s
#**.ueMal[*].tcpApp[190..199].tOpen = 180s + 0.1s*index - 19s



#**.ueMal[0].tcpApp[*].localAddress = "ueMal[0]"
#**.ueMal[1].tcpApp[*].localAddress = "ueMal[1]"

**.ueMal[*].tcp.tcpAlgorithmClass = "DumbTCP"

#**.server.numTcpApps = 1
#**.server.tcpApp[*].typename = "TCPSinkApp"
#**.server.tcpApp[*].localport = 1000

#============= Positioning and mobility ============
#*.eNodeB.mobility.initFromDisplayString = false
#*.eNodeB.mobility.initialX = 300m
#*.eNodeB.mobility.initialY = 300m
#*.ue.mobility.constraintAreaMaxX = 600m
#*.ue.mobility.constraintAreaMaxY = 600m
#*.ue.mobility.constraintAreaMinX = 0m
#*.ue.mobility.constraintAreaMinY = 0m
#*.ue.mobility.initFromDisplayString = false
#*.ue.mobility.initialX = uniform(0m,600m)
#*.ue.mobility.initialY = uniform(0m,600m)
#*.ue.mobility.speed = 1mps
*.ue[*].mobilityType = "StationaryMobility"
*.ueMal[*].mobilityType = "StationaryMobility"

[Config ChangingMalNum]
**.numMal = ${0..70 step 10}
**.numUe = 20

[Config UeNumTest]
**.numMal = 20
**.numUe = ${0..70 step 10}

[Config PacketRate]
**.numMal = 40
**.numUe = 20

[Config flowTableTimeout]
**.numMal = 40
**.numUe = 20
**.open_flow_controller*.controllerApps[*].flowModIdleTimeOut = ${2..8 step 2}

[Config detectionThreshold]
**.numMal = 40
**.numUe = 20

[Config waveFrequency]
**.numMal = 40
**.numUe = 20

